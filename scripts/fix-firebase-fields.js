// Script para corrigir campos que est√£o faltando no Firestore
// Execute este script para adicionar os campos obrigat√≥rios aos v√≠deos existentes

const admin = require('firebase-admin');

// IMPORTANTE: Descomente e configure suas credenciais antes de usar
// const serviceAccount = require('./serviceAccountKey.json');

// admin.initializeApp({
//   credential: admin.credential.cert(serviceAccount),
//   projectId: 'SEU_PROJECT_ID_AQUI'
// });

// const db = admin.firestore();

// Fun√ß√£o para corrigir campos que est√£o faltando
async function fixMissingFields() {
  try {
    console.log('üîç Buscando v√≠deos no Firestore...');
    
    const videosRef = db.collection('videos');
    const snapshot = await videosRef.get();
    
    if (snapshot.empty) {
      console.log('‚ùå Nenhum v√≠deo encontrado na cole√ß√£o.');
      return;
    }
    
    console.log(`üìπ Encontrados ${snapshot.size} v√≠deos. Verificando campos...`);
    
    let videosCorrigidos = 0;
    
    for (const doc of snapshot.docs) {
      const data = doc.data();
      const updates = {};
      let needsUpdate = false;
      
      // Verificar e adicionar arenaId se n√£o existir
      if (!data.arenaId) {
        updates.arenaId = 'arena_sport_center'; // Valor padr√£o
        needsUpdate = true;
        console.log(`  ‚ûï Adicionando arenaId para: ${data.title}`);
      }
      
      // Verificar e adicionar quadraId se n√£o existir
      if (!data.quadraId) {
        updates.quadraId = 'quadra_1'; // Valor padr√£o
        needsUpdate = true;
        console.log(`  ‚ûï Adicionando quadraId para: ${data.title}`);
      }
      
      // Verificar e adicionar hour se n√£o existir
      if (data.hour === undefined || data.hour === null) {
        // Tentar extrair hora do timestamp ou usar hora padr√£o
        let hour = 18; // Valor padr√£o
        
        if (data.createdAt && data.createdAt.toDate) {
          hour = data.createdAt.toDate().getHours();
        } else if (data.timestamp) {
          hour = new Date(data.timestamp).getHours();
        }
        
        updates.hour = hour;
        needsUpdate = true;
        console.log(`  ‚ûï Adicionando hour (${hour}h) para: ${data.title}`);
      }
      
      // Verificar e adicionar timestamp se n√£o existir
      if (!data.timestamp) {
        let timestamp = new Date().toISOString(); // Valor padr√£o
        
        if (data.createdAt && data.createdAt.toDate) {
          timestamp = data.createdAt.toDate().toISOString();
        } else if (data.date) {
          // Tentar converter data para timestamp
          const dateStr = data.date.includes('/') 
            ? data.date.split('/').reverse().join('-') // DD/MM/YYYY -> YYYY-MM-DD
            : data.date;
          timestamp = new Date(dateStr).toISOString();
        }
        
        updates.timestamp = timestamp;
        needsUpdate = true;
        console.log(`  ‚ûï Adicionando timestamp para: ${data.title}`);
      }
      
      // Corrigir formato da data se necess√°rio
      if (data.date && data.date.includes('/')) {
        // Converter DD/MM/YYYY para YYYY-MM-DD
        const [day, month, year] = data.date.split('/');
        updates.date = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        needsUpdate = true;
        console.log(`  üîÑ Corrigindo formato da data para: ${data.title}`);
      }
      
      // Corrigir views se for string
      if (typeof data.views === 'string') {
        updates.views = parseInt(data.views) || 0;
        needsUpdate = true;
        console.log(`  üîÑ Convertendo views para number: ${data.title}`);
      }
      
      // Aplicar atualiza√ß√µes se necess√°rio
      if (needsUpdate) {
        await doc.ref.update(updates);
        videosCorrigidos++;
        console.log(`  ‚úÖ V√≠deo atualizado: ${data.title}`);
      } else {
        console.log(`  ‚úÖ V√≠deo j√° est√° correto: ${data.title}`);
      }
    }
    
    console.log(`\nüéâ Processo conclu√≠do!`);
    console.log(`üìä V√≠deos corrigidos: ${videosCorrigidos}/${snapshot.size}`);
    console.log(`\nüöÄ Agora teste o app para ver se os filtros funcionam!`);
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir campos:', error);
  }
}

// Fun√ß√£o para listar v√≠deos e seus campos
async function listVideosFields() {
  try {
    console.log('üìã Listando campos dos v√≠deos...');
    
    const videosRef = db.collection('videos');
    const snapshot = await videosRef.get();
    
    if (snapshot.empty) {
      console.log('‚ùå Nenhum v√≠deo encontrado.');
      return;
    }
    
    snapshot.forEach((doc) => {
      const data = doc.data();
      console.log(`\nüìπ V√≠deo: ${data.title}`);
      console.log(`   ID: ${doc.id}`);
      console.log(`   arenaId: ${data.arenaId || '‚ùå FALTANDO'}`);
      console.log(`   quadraId: ${data.quadraId || '‚ùå FALTANDO'}`);
      console.log(`   hour: ${data.hour !== undefined ? data.hour : '‚ùå FALTANDO'}`);
      console.log(`   timestamp: ${data.timestamp || '‚ùå FALTANDO'}`);
      console.log(`   date: ${data.date}`);
      console.log(`   views: ${data.views} (${typeof data.views})`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao listar v√≠deos:', error);
  }
}

// Exportar fun√ß√µes
module.exports = {
  fixMissingFields,
  listVideosFields
};

// Executar se chamado diretamente
if (require.main === module) {
  console.log('üîß SCRIPT DE CORRE√á√ÉO DE CAMPOS DO FIREBASE');
  console.log('==========================================');
  console.log('');
  console.log('‚ö†Ô∏è  ANTES DE EXECUTAR:');
  console.log('1. Configure suas credenciais do Firebase Admin SDK');
  console.log('2. Descomente as linhas de inicializa√ß√£o do Firebase');
  console.log('3. Execute: node scripts/fix-firebase-fields.js');
  console.log('');
  console.log('üìã FUN√á√ïES DISPON√çVEIS:');
  console.log('- fixMissingFields(): Adiciona campos que est√£o faltando');
  console.log('- listVideosFields(): Lista todos os v√≠deos e seus campos');
  console.log('');
  console.log('üéØ ESTE SCRIPT VAI:');
  console.log('‚úÖ Adicionar arenaId (padr√£o: "arena_sport_center")');
  console.log('‚úÖ Adicionar quadraId (padr√£o: "quadra_1")');
  console.log('‚úÖ Adicionar hour (extra√≠do do timestamp ou padr√£o: 18)');
  console.log('‚úÖ Adicionar timestamp (extra√≠do do createdAt ou data atual)');
  console.log('‚úÖ Corrigir formato da data (DD/MM/YYYY ‚Üí YYYY-MM-DD)');
  console.log('‚úÖ Converter views de string para number');
  console.log('');
  console.log('üöÄ Ap√≥s executar, teste o app para verificar se os filtros funcionam!');
}